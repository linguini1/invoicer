# Functions for console interface
__author__ = "Matteo Golin"

# Imports
import re
import datetime as dt
from utils import Issuer, Client, Item, Template, EMAIL_RE, ISO_DATE_RE

# CONSTANTS
YES = ["yes", "yeah", "y", "yep"]
NO = ["no", "nope", "nah", "stop", "cancel", "n"]


# Classes
class Interface:

    def __init__(self):
        pass

    @staticmethod
    def __get_string(prompt: str, regex_pattern: str | None = None, input_format: str = "") -> str:

        """Gets a valid string input from the user."""

        while True:
            value = input(prompt)

            # Does value match pattern
            if regex_pattern:
                match = re.match(regex_pattern, value)
            else:
                match = True

            if match:
                return value
            else:
                print(f"{value} does not meet the required input format. {input_format}")

    @staticmethod
    def __get_int(prompt: str, minimum: int, maximum: int) -> int:

        """Returns a user inputted integer within the given range."""

        while True:
            value = input(prompt)

            try:
                value = int(value)

                if minimum <= value <= maximum:
                    return value
                else:
                    print(f"{value} must be between {minimum} and {maximum}.")

            except ValueError:
                print(f"{value} is not an integer.")

    @staticmethod
    def __get_float(prompt: str, minimum: float, maximum: float) -> float:

        """Returns a user inputted float within the given range."""

        while True:
            value = input(prompt)

            try:
                value = float(value)

                if minimum <= value <= maximum:
                    return value
                else:
                    print(f"{value} must be between {minimum} and {maximum}.")

            except ValueError:
                print(f"{value} is not a number.")

    def __get_phone_number(self, prompt: str = "Phone number: ") -> int:

        """Gets a 10 digit phone number from the user in the form of an integer."""

        while True:

            value = self.__get_int(prompt, 0, 10 ** 11)

            if len(str(value)) != 10:
                print("Phone number must be 10 digits.")
            else:
                return value

    def get_issuer(self) -> Issuer:

        name = self.__get_string("Issuer name: ")
        account_name = self.__get_string("Account name: ")
        bank = self.__get_string("Bank: ")
        email = self.__get_string("Email address: ", EMAIL_RE)
        phone = self.__get_phone_number()

        issuer = Issuer(
            name=name,
            account_name=account_name,
            bank=bank,
            email=email,
            phone=phone
        )

        return issuer

    def get_client(self) -> Client:

        """Returns a client object from user input."""

        name = self.__get_string("Name: ")
        address = self.__get_string("Address: ")
        location = self.__get_string("Location: ")

        client = Client(
            name=name,
            address=address,
            location=location
        )

        return client

    def get_items(self) -> list[Item]:

        """Returns a list of items from user input."""

        cont = ""  # Stores user response to continue
        items = []  # Stores items generated by user.

        while cont.lower() not in NO:

            print(f"Collecting information for item #{len(items) + 1}.")

            name = self.__get_string("Name: ")
            description = self.__get_string("Description: ")
            price = self.__get_float("Price: ", minimum=0, maximum=10 ** 8)
            quantity = self.__get_int("Quantity: ", minimum=0, maximum=10 ** 8)

            item = Item(
                name=name,
                description=description,
                price=price,
                quantity=quantity
            )

            items.append(item)

            cont = input("Would you like to continue? Enter (y/n): ")

        return items

    def get_terms(self) -> tuple[bool, str]:

        """
        Returns a tuple where the boolean signifies whether or not the terms should be read from a file,
        and the string represents either the filepath or the terms themself.
        """

        while True:
            in_file = input("Should the terms and conditions be loaded from a file? Enter (y/n): ")

            # Load from file
            if in_file.lower() in YES:

                in_file = True
                filename = self.__get_string("Filepath: ")
                return in_file, filename

            # Don't load from file
            elif in_file.lower() in NO:

                in_file = False
                terms = self.__get_string("Terms and conditions: ")
                return in_file, terms

            # Invalid input
            else:
                print("That was not a yes or no answer.")

    def get_due_date(self) -> dt.date:

        """Returns the due date of the invoice in an ISO date formatted string."""

        while True:
            due_date = self.__get_string("Due date: ", ISO_DATE_RE, "yyyy-mm-dd")

            try:
                due_date = dt.date.fromisoformat(due_date)
                return due_date
            except ValueError:
                print("Invalid date.")

    def invoice_from_input(self) -> Template:

        """Returns an invoice template from user input."""

        print("Please define the issuer of the invoice.")
        issuer = self.get_issuer()

        print("\nPlease define the recipient of the invoice.")
        client = self.get_client()

        print("\nPlease list all the items the recipient will be charged for on this invoice.")
        items = self.get_items()

        print("\nPlease enter the due date of the invoice.")
        due = self.get_due_date()

        print("\nPlease enter the terms and agreements.")
        terms = self.get_terms()

        # Define template
        template = Template(issuer, client, items, due=due)

        # Add terms either from file or as a string enter by user
        if terms[0]:
            template.terms_from_file(terms[1])
        else:
            template.terms = terms[1]

        return template
